@startuml
object SnakeProcessor {
Handles simulating the board
- board : Board
- players[] : Player
}

class Board {
- Cell[] : Cell
+ tick()
}

class Cell {
+ contentType : CellType
}

enum CellType {
+ Player
+ Food
+ Empty
}

Cell <|-- CellType

Board "1" --> "1..*" Cell : "Contains"

class EmptyCell {
}

Cell <|-- EmptyCell

class PlayerCell {
+player: Player
}

Cell <|-- PlayerCell

class Player {
- username : String
- score : U32
- snakeRoot : Snake
+ changeDirection(direction)
+ tick()
}

SnakeProcessor "1" --> "1..*" Player : "Contains"

class FoodCell {
+ pointValue : U32
}

Cell <|-- FoodCell
PlayerCell "1..*" --> "1" Player : "Can Contain"

class Snake {
+ hasChild : Boolean
+ child : Snake
+ direction : Direction
}

Snake --> Snake : "Can have children"
Player "1" --> "1" Snake : "Uses"

SnakeProcessor "1" --> "1" Board : "Handles"

object SocketServer {
Handles receiving moves from clients
and accepts connections
and sends board updates
}

object SocketClient {
Handles sending moves
and connecting to the server
and receives board updates
}

object SnakeClient {
Handles accepting moves from the player
and displaying boards
}

SocketServer "1" --> "0..*" SocketClient : "via TCP"
SnakeProcessor "1" <--> "1" SocketServer : "via jMsg"
SocketClient "1" <--> "1" SnakeClient : "via jMsg"
@enduml